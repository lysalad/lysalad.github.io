

Box와 testBox

public class TestBox { //Box.java와 함께
	public static void main(String[] args) {
		/*참조형 변수는 null을 참조할 수 있다. null은 지금 참조하는 것이 없다! 는말이다.
		참조형인데 null을 참조한다는 말은??*/
		Box none = null;
		/* 참조하는 게 없기 때문에 없다! compile까지는 잘 된다. run이 안된다.
		compile은 확인만 하기 때문이다. 하지만 run을 하면 그것을 파롤로 뱉어야하기 때문에 당연히 오류가 난다.
		compile까지는 시니피앙이 있구나~ 만을 보고, run을 하면 시니피앙과 시니피에를 합쳐 파롤로 만들어내야하는데
		null을 하면 속이 비어서 합칠 수 있는 게 없기 때문이다.
		항상 참조를 잘 살펴보자!*/
		// none.width = 10;
		
		
		// Box라는 클래스가 하나의 Type(참조 변수)으로 사용된다고 선언한다.
		// Box라는 java 파일을 같은 폴더 안에 만들어놔야 참조가 된다.(=경로가 같아야한다.)
		Box box1; 
		box1 = new Box(); //박스 인스턴스가 하나 만들어졌고, 이 인스턴스가 참고하는 참조 변수도 만들어졌다.
		
		// System.out.println(box1.color); //이렇게 하면 color라는 field가 없다고 바로 compile에서 알려준다.
		
		// .은 참조형 변수 안을 보는 게 아니라, 참조형 변수가 가리키는 instance 속을 보는 것이다.
		box1.width = 3;
		box1.length = 3;
		box1.height = 3;
		
		Box box2 = new Box();
		box2.width = 10;
		box2.length = 10;
		box2.height = 10;
		
		/* 여기서 만드는 박스는 동작(기능)을 할 수 있다.
		만들어보자 그다음 출력! - box.java에 */
		
		box1.printAllstate();
		box2.printAllstate();
		
		System.out.println("부피: " + box1.getVolume);
		System.out.println(box2.getVolume);
	}
}

/* 인스턴스는 박스의 가로 세로 높이로 값을 가질 수 있는 공간이 생긴다.
인스턴스를 만들어 줬다는건 공간을 줬다는 말 = 시니피앙을 넣어줄 공간을 만들어 준 것이다.
 box1 과 box2 는 별개의 인스턴스지만 그 안에 값은 가로 세로 높이로 같다. 이는 박스의 특징이다.
 가로, 세로, 높이는 변수로 아직 초기화도 선언도 안되어있기때문에 이 작업이 필요하다.*/


/* [객체지향 프로그램을 만들어보자!]
객체지향이란 현실의 모든 객체(object)를 객체로 보는 시선에서 시작한다.
객체(object)란? 상태와 동작을 가지고 있다.

객체 지향 프로그래밍은 상태와 동작을 가지는 객체를 코드로 적어서, 
코드로 만들어진 객체를 통해서,
객체들 간에 메시지를 주고받으며,
프로그램의 흐름을 만들어 내는 것이다.

객체 -> 코드
코드 -> 객체   객체들간에 메시지를 주고 받으며 프로그램의 흐름을 만들어 내는 방식

이 말은 참 이상한 말인데, 모~ 든걸 다 객체라고 보면 된다.
시니피앙 시니피에를 말하는거같네... 
(예) 현실에 있는 강아지 -> 시니피에는 '강아지' 시니피앙은 '뭐 털이 있따, 귀엽다, 등등'
컴퓨터에게 시니피에를 넣으면 시니피앙이 나오도록 연결을 시키는 것이 메시지를 주고받는 것인 듯...?
그러면 현실의 강아지가 컴퓨터 안에 프로그램(객체) 로 출력된다.

객체라는 말은 -> 시니피앙과 시니피에로 이루어진 것을 말하는 것 같다.
그래서 코드가 언어로군

코드는 언어 중에서도 파롤이며, 코딩이 랑그인건가?

java에서 객체는 class로 표현된다.*/

// 예시로 객체 '박스'(시니피에는 존재하지만 시니피앙은 존재하지 않는다. 시니피앙을 코딩으로 만들어준다.)를 만들자.
public class Box {
	/*상자의 값과 상태(시니피앙 부분) 은 (member variable) / 필드 (fields)
	'상자'라는 이름은 우리가 전부 가지고 있지만, 어떤 상자인지는 각각 다르게 생각하고 있다.
	따라서 우리는 어떤 상자를 만들지를 합의하고 이를 표현하기 위한 코드를 만들어야한다.
	시니피앙 을 합의하는 단계*/

	int length;
	int width;
	int height;
	// int volume = length * width * height;
	
	// 기능과 동작은 메소드로 표현한다.메소드도 역시 시니피앙에 들어간다.
	
	
	public void printAllstate() {
		System.out.println(width);
		System.out.println(length);
		System.out.println(height);
	}
	
	// 동작을 더 만들어보자
	// 박스는 자기자신의 부피를 구해서 
	// 정수형 값으로 "알려줄 수 있다."
	// "알려줄 수 있다" 는 것에 초점을 맞춰서
	// 메소드로 만들어보자.(=반환을 해보자)

	
	// 파라미터에 아무것도 넣을 필요가 없는게,
	// 자기 자신의 가로, 세로, 높이 값을 이미 가지고 있다.
	// 가지고 있는 것을 이름으로 이미 가지고 있다.
	// 그게 겉으로는 보이지 않아도 이미 가지고 있기 때문에
	// 상호작용을 하는 순간 밖으로 나온다.
	
	public int getVolume() {
		//자기가 가지고 있는 상태값에 따라서
		// 계산해서 알려줄 수 있게
		
		return width * length * height;
	}
	
}


